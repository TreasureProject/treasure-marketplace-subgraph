enum Status {
  Active
  Hidden
  Sold
}

enum TokenStandard {
  ERC721
  ERC1155
}

type Attribute @entity {
  id: ID!

  "Internal for tracking tokenIds calculated"
  _tokenIds: [String!]!

  collection: Collection!
  metadata: [MetadataAttribute!]! @derivedFrom(field: "attribute")
  name: String!
  percentage: BigDecimal
  value: String!
}

type Collection @entity {
  id: ID!

  "Internal for tracking attributes for a collection"
  _attributeIds: [String!]!

  "Internal for tracking listings"
  _listingIds: [String!]!
  
  "Internal for tracking metadata failures to retry"
  _missingMetadataIds: [String!]!
  
  "Internal for tracking owners of tokens for a collection"
  _owners: [String!]!
  
  "Internal for tracking tokenIds minted for a collection"
  _tokenIds: [String!]!

  address: Bytes!

  "Used to determine possible filters for collection"
  attributes: [Attribute!] @derivedFrom(field: "collection")

  creator: Creator!
  floorPrice: BigInt!
  listings: [Listing!]! @derivedFrom(field: "collection")
  name: String!
  standard: TokenStandard
  symbol: String
  tokens: [Token!]! @derivedFrom(field: "collection")
  totalItems: BigInt!
  totalListings: BigInt!
  totalOwners: BigInt!
  totalSales: BigInt!
  totalVolume: BigInt!
}

type Creator @entity {
  id: ID!
  collections: [Collection!]! @derivedFrom(field: "creator")
  fee: BigDecimal!
  name: String!
}

type Listing @entity {
  id: ID!

  "Track originally listed quantity, needed when staking Treasures"
  _listedQuantity: BigInt!

  blockTimestamp: BigInt!
  buyer: User
  collection: Collection!
  collectionName: String!
  expires: BigInt!

  "Used to support multiple filters with metadata attributes"
  filters: [String!]

  nicePrice: String
  pricePerItem: BigInt!
  quantity: BigInt!
  seller: User!
  status: Status!
  token: Token!
  tokenName: String
  totalPrice: String
  transactionLink: String

  "deprecated: use seller field"
  user: User!
}

type Metadata @entity {
  id: ID!
  attributes: [MetadataAttribute!] @derivedFrom(field: "metadata")
  description: String!
  image: String!
  name: String!
  token: Token!
}

type MetadataAttribute @entity {
  id: ID!
  attribute: Attribute!
  metadata: Metadata!
}

type Student @entity {
  id: ID!
}

type Exerciser @entity {
  id: ID!
}

type Token @entity {
  id: ID!
  collection: Collection!

  "Internal tracking of owners of token for ERC1155"
  _owners: [String!]!

  "Used to support multiple filters with metadata attributes"
  filters: [String!]!

  floorPrice: BigInt
  listings: [Listing!] @derivedFrom(field: "token")
  metadata: Metadata
  metadataUri: String
  name: String

  "Owner of token for ERC721, null for ERC1155"
  owner: User

  "Owners of token for ERC1155"
  owners: [UserToken!] @derivedFrom(field: "token")

  rank: Int
  rarity: BigDecimal
  tokenId: BigInt!

  "This is used for ERC1155s"
  totalItems: BigInt!

  "This is used for ERC1155s"
  totalOwners: BigInt!
}

type User @entity {
  id: ID!
  listings: [Listing!]! @derivedFrom(field: "user")
  tokens: [UserToken!]! @derivedFrom(field: "user")
}

type UserToken @entity {
  id: ID!
  quantity: BigInt!
  token: Token!
  user: User!
}
